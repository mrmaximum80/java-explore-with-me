{
	"info": {
		"_postman_id": "a0d1cee4-5eaa-40be-8040-b347f90bf810",
		"name": "Explore with me - comment feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "25517399"
	},
	"item": [
		{
			"name": "Добавление нового пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(\"feature_author\").equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(\"feature_author@mail.ru\").equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"userId\", target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"feature_author\",\r\n    \"email\":\"feature_author@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/admin/users",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление новой категории",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"pm.collectionVariables.set(\"catId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\": \"feature_category\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/admin/categories",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"admin",
						"categories"
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"pm.collectionVariables.set(\"eventId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n\"annotation\":\"Comments feature event annotation\",\r\n\"category\":{{catId}},\r\n\"description\":\"Comments feature event description\",\r\n\"eventDate\":\"2023-12-01 00:00:00\",\r\n\"location\":{\r\n    \"lat\":56.0097,\r\n    \"lon\":37.4819},\r\n\"paid\":\"false\",\r\n\"participantLimit\":0,\r\n\"requestModeration\":\"false\",\r\n\"title\":\"Comments feature event\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/events",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"events"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий к неопубликованному событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId={{eventId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикация события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.be.ok; // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Событие должно иметь состояние PUBLISHED\", function () {\r",
							"    pm.expect(\"PUBLISHED\").equal(target.state, 'Событие должно иметь состояние PUBLISHED');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"stateAction\":\"PUBLISH_EVENT\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/admin/events/:eventId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"admin",
						"events",
						":eventId"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий менее минимальной длины",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(400); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"F\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId={{eventId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий слишком большого размера",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 400 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(400); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Fмваиапивтпа ьпэьфхыьсъы ваз оыазмрфшхвымьэвалт пахикш твотывзмыах ьывахы ьпалвьхвщь лавапт пвща ьбзвпаэьвхптщ твщаыщтахшщыкти\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId={{eventId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий от несуществующего пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(404); // код ответа должен быть равен 404 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId={{eventId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Комментарий несуществующего события",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(404); // код ответа должен быть равен 404 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId=10000",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "10000"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Легитимный комментарий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(\"Feature event comment\").equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"comId\", pm.response.json().id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments?eventId={{eventId}}",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"query": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование  несуществующего комментария",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(404); // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments/:comId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "comId",
							"value": "10000"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование  комментария несуществующим пользователем",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 404 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(404); // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments/:comId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "10000"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Добавление нового пользователя",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"let serverResponse = pm.response;\r",
							"pm.test(\"Ответ должен содержать код статуса 201 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(201); // код ответа должен быть равен 201 OK\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Пользователь должен содержать поля: id, name, email\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('name');\r",
							"pm.expect(target).to.have.property('email');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(\"feature_non_author\").equal(target.name, 'Имя пользователя должно соответствовать отправленному в запросе');\r",
							"    pm.expect(\"feature__non_author@mail.ru\").equal(target.email, 'Почта пользователя должна соответствовать отправленной в запросе');\r",
							"});\r",
							"\r",
							"pm.collectionVariables.set(\"userId2\", target.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"name\":\"feature_non_author\",\r\n    \"email\":\"feature__non_author@mail.ru\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/admin/users",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"admin",
						"users"
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование  комментария не автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 409 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(409); // код ответа должен быть равен 409\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); "
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments/:comId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId2}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Редактирование  комментария автором",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 200\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: id, text, event, author, created\", function () {\r",
							"pm.expect(target).to.have.property('id');\r",
							"pm.expect(target).to.have.property('text');\r",
							"pm.expect(target).to.have.property('event');\r",
							"pm.expect(target).to.have.property('author');\r",
							"pm.expect(target).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target.id).to.not.be.null;\r",
							"    pm.expect(\"Feature event comment update\").equal(target.text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\"Feature event comment update\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments/:comId",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments",
						":comId"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						},
						{
							"key": "comId",
							"value": "{{comId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос комментариев пользователя",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен являться массивом\", function() {\r",
							"    const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: text, event, created\", function () {\r",
							"pm.expect(target[0]).to.have.property('text');\r",
							"pm.expect(target[0]).to.have.property('event');\r",
							"pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target[0].id).to.not.be.null;\r",
							"    pm.expect(\"Feature event comment update\").equal(target[0].text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/users/:userId/comments",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"users",
						":userId",
						"comments"
					],
					"variable": [
						{
							"key": "userId",
							"value": "{{userId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Запрос комментариев к событию",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Ответ должен содержать код статуса 200 и данные в формате json\", function() {\r",
							"    pm.response.to.have.status(200); // код ответа должен быть равен 404\r",
							"    pm.response.to.be.withBody; // ответ должен содержать тело\r",
							"    pm.response.to.be.json; // и тело ответа должно быть в формате JSON\r",
							"}); \r",
							"\r",
							"pm.test(\"Ответ должен являться массивом\", function() {\r",
							"    const body = pm.response.json(); // получаем тело ответа в формате JSON\r",
							"    pm.expect(body).is.an('array'); // проверяем, что тело ответа является массивом \r",
							"}); \r",
							"\r",
							"const target = pm.response.json();\r",
							"\r",
							"pm.test(\"Комментарий должен содержать поля: text, author, created\", function () {\r",
							"pm.expect(target[0]).to.have.property('text');\r",
							"pm.expect(target[0]).to.have.property('author');\r",
							"pm.expect(target[0]).to.have.property('created');\r",
							"});\r",
							"\r",
							"pm.test(\"Данные в ответе должны соответствовать данным в запросе\", function () {\r",
							"    pm.expect(target[0].id).to.not.be.null;\r",
							"    pm.expect(\"Feature event comment update\").equal(target[0].text, 'Текст комментария должен соответствовать отправленному в запросе');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{BaseUrl}}/events/:eventId/comments",
					"host": [
						"{{BaseUrl}}"
					],
					"path": [
						"events",
						":eventId",
						"comments"
					],
					"variable": [
						{
							"key": "eventId",
							"value": "{{eventId}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "BaseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "userId",
			"value": "",
			"type": "string"
		},
		{
			"key": "eventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "catId",
			"value": "",
			"type": "string"
		},
		{
			"key": "comId",
			"value": "",
			"type": "string"
		},
		{
			"key": "userId2",
			"value": "",
			"type": "string"
		}
	]
}